//////////////////////////////////////////////////////////////////////////
// 外部变量：存储从应用程序中得到的数据的变量
// 外部变量一般存储在常量缓存中，常量缓存的声明方法近似于结构的声明
// 但关键字是cbuffer
// register(b0)表示手动将着色器变量绑定到特定寄存器，其中b表示常量缓存
// 0表示寄存器编号，本例中删除“ : register( b0 )”效果一样
//////////////////////////////////////////////////////////////////////////
cbuffer ConstantBuffer : register(b0)
{
    matrix World;             //世界变换矩阵
    matrix View;              //观察变换矩阵
    matrix Projection;        //投影变换矩阵
}

//////////////////////////////////////////////////////////////////////////
//顶点输入结构
//这里顶点输入结构包含位置信息和颜色信息
//HLSL语言中，变量的声明一般按照“类型 变量名 : 语义”的格式来声明
//////////////////////////////////////////////////////////////////////////
struct VS_INPUT
{
    float4 Pos : SV_POSITION;     //float4是类型，SV_POSITION为语义表示位置
    float4 Color : COLOR0;        //COLOR0表示颜色，COLOR后的数字为0到资源支持
                                  //最大数之间的整数
};

//////////////////////////////////////////////////////////////////////////
// 顶点着色器函数
// 这里顶点着色器不同于实验4，实验4的顶点信息只包含位置信息，所以其返回类型
// 为float4，而本例中顶点信息包含位置和颜色，所以返回类型为我们自己定义的
// 顶点接结构VS_INPUT
//////////////////////////////////////////////////////////////////////////
VS_INPUT VS(float4 Pos : POSITION, float4 Color : COLOR)
{
    VS_INPUT input = (VS_INPUT)0;              //定义一个顶点结构的对象
    input.Pos = mul(Pos, World);             //进行世界坐标变换**mul为矩阵乘法的函数**
    input.Pos = mul(input.Pos, View);        //进行观察坐标变换**mul第一个参数为向量**
    input.Pos = mul(input.Pos, Projection);  //进行投影坐标变换**mul第二个参数为矩阵**

    input.Color = Color;                       //设置VS_INPUT对象的颜色

    return input;                              //返回VS_INPUT的对象
}

//////////////////////////////////////////////////////////////////////////
// 像素着色器函数
// 和实验4不同之处在于，参数为一个VS_INPUT的对象
//////////////////////////////////////////////////////////////////////////
float4 PS(VS_INPUT input) : SV_Target
{
    return input.Color;
}

//////////////////////////////////////////////////////////////////////////
// Technique将不同着色器整合起来实现某种功能
// 定义Technique由technique11关键字进行
//////////////////////////////////////////////////////////////////////////
technique11 TexTech
{
    //Technique通过Pass（通道）来应用不同的效果，每个Technique可以有多个Pass
    //本例中只有一个Pass
    pass P0
    {
        //设置顶点着色器
        //CompileShader包含两个版本，一个是目标着色器，这里使用的是SM5.0
        //另一个参数为我们自己顶一个着色器函数
        SetVertexShader(CompileShader(vs_5_0, VS()));
        SetGeometryShader(NULL);   //本例中没有用几何着色器，所以设置为空
        SetPixelShader(CompileShader(ps_5_0, PS())); //设置像素着色器
    }
}